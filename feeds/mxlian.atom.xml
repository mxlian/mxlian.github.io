<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>planocomplejo</title><link href="http://mxlian.github.io/" rel="alternate"></link><link href="http://mxlian.github.io/feeds/mxlian.atom.xml" rel="self"></link><id>http://mxlian.github.io/</id><updated>2014-10-22T14:52:00+02:00</updated><entry><title>stop the nonsense: from Wordpress to static blogging</title><link href="http://mxlian.github.io/stop-the-nonsense-from-wordpress-to-static-blogging.html" rel="alternate"></link><updated>2014-10-22T14:52:00+02:00</updated><author><name>mxlian</name></author><id>tag:mxlian.github.io,2014-10-22:stop-the-nonsense-from-wordpress-to-static-blogging.html</id><summary type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;Why i went from Wordpress to Pelican. Yeah&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey I am the one&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Modified&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;settings.&lt;/span&gt; &lt;span class="nx"&gt;re&lt;/span&gt;&lt;span class="na"&gt;-generating...&lt;/span&gt;
&lt;span class="nb"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;signal&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;blinker.base.NamedSignal&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x2ba5a43d89d0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'static_generator_preread'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;pelican.generators.StaticGenerator&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x2ba5a77fad50&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;signal&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;blinker.base.NamedSignal&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x2ba5a43d8a10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'static_generator_context'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;pelican.generators.StaticGenerator&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x2ba5a77fad50&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;signal&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;blinker.base.NamedSignal&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x2ba5a43d88d0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'article_generator_preread'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;pelican.generators.ArticlesGenerator&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x2ba5a7755510&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;signal&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;blinker.base.NamedSignal&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x2ba5a43d8910&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'article_generator_context'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;pelican.generators.ArticlesGenerator&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x2ba5a7755510&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;signal&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;blinker.base.NamedSignal&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x2ba5a43d8950&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'page_generator_preread'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;pelican.generators.PagesGenerator&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x2ba5a7841f90&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;signal&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;blinker.base.NamedSignal&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x2ba5a43d8990&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'page_generator_context'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;pelican.generators.PagesGenerator&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x2ba5a7841f90&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Processed&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;s&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;draft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.14&lt;/span&gt; &lt;span class="nx"&gt;seconds.&lt;/span&gt;
&lt;span class="mf"&gt;127.0.0.1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Oct&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;2014&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; "GET / HTTP/1.1" 200 -
127.0.0.1 - - &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Oct&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;2014&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; "GET /theme/css/style.css HTTP/1.1" 200 -
127.0.0.1 - - &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Oct&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;2014&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; "GET /theme/css/pygments.css HTTP/1.1" 200 -
127.0.0.1 - - &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Oct&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;2014&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; "GET /images/logo.png HTTP/1.1" 200 -
127.0.0.1 - - &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Oct&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;2014&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; "GET /images/rfid/sss-siedle-card.jpg HTTP/1.1" 200 -
127.0.0.1 - - &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Oct&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;2014&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; "GET / HTTP/1.1" 200 -
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;asdf laskdfj &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="c"&gt;# This file is only used if you use `make publish` or&lt;/span&gt;
&lt;span class="c"&gt;# explicitly specify it as your config file.&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curdir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelicanconf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'http://mxlian.github.io'&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'feeds/all.atom.xml'&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'feeds/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.atom.xml'&lt;/span&gt;

&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c"&gt;# Following items are often useful when publishing&lt;/span&gt;

&lt;span class="c"&gt;#DISQUS_SITENAME = ""&lt;/span&gt;
&lt;span class="c"&gt;#GOOGLE_ANALYTICS = ""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</summary><category term="markdown"></category><category term="blog"></category></entry><entry><title>Extracting RFID chip from SSS Siedle</title><link href="http://mxlian.github.io/extracting-rfid-chip-from-sss-siedle.html" rel="alternate"></link><updated>2013-10-17T00:00:00+02:00</updated><author><name>mxlian</name></author><id>tag:mxlian.github.io,2013-10-17:extracting-rfid-chip-from-sss-siedle.html</id><summary type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;At work we use RFID cards to get through the doors. I don't like to carry it hanging from the neck. I wanted to put the rfid card in my phone, which is the only artifact (beside my wristwatch) that I carry with me all the time. &lt;/p&gt;
&lt;p&gt;One problem: the card is too thick to fit inside the phone. But it's mostly made of plastic, so my idea was to somehow extract the chip and antena from the card.&lt;/p&gt;
&lt;p&gt;Researching I found almost the same solution I wanted by &lt;a href="http://www.adafruit.com/blog/2012/07/16/how-to-embed-a-rfid-transit-card-in-your-iphone/"&gt;Adafruits&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea is to 'dissolve' the plastic and extract the internals. Sound much easier than it actually is and it depends a lot from the type of card you are using.&lt;/p&gt;
&lt;p&gt;After some failed attempts (3 actually), I decided to document the process to help someone with the same kind of card.&lt;/p&gt;
&lt;p&gt;So if you have a Siedle RFID card, which looks like the picture, keep reading:&lt;/p&gt;
&lt;p&gt;&lt;img alt="SSS Siedle RFID" src="http://mxlian.github.io/images/rfid/sss-siedle-card.jpg" style="width: 300px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;

&lt;h1&gt;1. Dissolve the plastic&lt;/h1&gt;
&lt;p&gt;The solvent used was &lt;strong&gt;acetone&lt;/strong&gt;. You can find it in cheap nail lacquer removers. It takes a lot of time. I got usable results after 10-12 hours. The best is to leave it covered, to prevent flooding your entire home with acetone and also reduce the evaporation.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Nail remover" src="http://mxlian.github.io/images/rfid/1.JPG" style="width: 1024px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;I covered it with a glass (don't use plastic!) bowl, and leave it the whole night working.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Nail remover" src="http://mxlian.github.io/images/rfid/2.JPG" style="width: 1024px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;The plastic is not rigid anymore. It look like gum. You can easily distinguish the antenna ring on the card.&lt;/p&gt;
&lt;h1&gt;2. Extract the chip&lt;/h1&gt;
&lt;p&gt;Using scissors cut the circle formed by the antenna. Don't worry there are nothing useful outside the ring, but be careful not to cut too much. It's better to leave some room for errors and then retouch it later in small increments.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Nail remover" src="http://mxlian.github.io/images/rfid/3.JPG" style="width: 1024px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;The card is like a sandwich, with the rfid circuit in the middle. Why you want to do is to get rid of the bread. Using small increments, cut arround the circle formed by the antenna until you find a spot where both sides of the card aren't stick to each other. From that sort of bubble you want to start to pull the both sides in opposite directions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Nail remover" src="http://mxlian.github.io/images/rfid/4.JPG" style="width: 1024px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;It's better to start on the opposite side where the chip resides, to leave the dedicate part for the end, when you already have revealed most of the antenna's surface.&lt;/p&gt;
&lt;p&gt;I've marked with a circle where the chip approximately resides, and with an arrow the best place to start pulling the card aside.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Nail remover" src="http://mxlian.github.io/images/rfid/5.JPG" style="width: 1024px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;Start pulling slowly and very carefully ...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Nail remover" src="http://mxlian.github.io/images/rfid/6.JPG" style="width: 1024px; height: auto; max-width: 100%;"/&gt;
&lt;img alt="Nail remover" src="http://mxlian.github.io/images/rfid/7.JPG" style="width: 1024px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;The chip is attached to the antenna with &lt;strong&gt;very very thin wires&lt;/strong&gt;. If you brake it, you're done. So be very careful. That's the tricky part.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Nail remover" src="http://mxlian.github.io/images/rfid/8.JPG" style="width: 1024px; height: auto; max-width: 100%;"/&gt;
&lt;img alt="Nail remover" src="http://mxlian.github.io/images/rfid/9.JPG" style="width: 1024px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;h1&gt;3. Protect it&lt;/h1&gt;
&lt;p&gt;Now that you managed to get rid of the plastic and the chip stills being connected to the antenna it's time to protect this fragile device. I used simple Tesa tape, to sandwich it. Works like a charm.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Nail remover" src="http://mxlian.github.io/images/rfid/10.JPG" style="width: 1024px; height: auto; max-width: 100%;"/&gt;
&lt;img alt="Nail remover" src="http://mxlian.github.io/images/rfid/11.JPG" style="width: 1024px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;Now enjoy the magic of oppening the doors only with your phone.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Nail remover" src="http://mxlian.github.io/images/rfid/12.JPG" style="width: 1024px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary></entry></feed>